package it.polimi.deib.provaFinale2014.andrea.celli_stefano1.cereda.client.interfaces.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JPanel;

/**
 * This class manages a panel that contains two buttons to let the player choose
 * which pawn he wants to use (in a two player match).
 * 
 * @author Andrea
 * 
 */
public class PawnChooserPanel extends JPanel {

	// the button listener
	private ButtonListener listener;

	// buttons
	JButton pawn1Button = new JButton("Use pawn 1");
	JButton pawn2Button = new JButton("Use pawn 2");

	// dimension of the panel
	private int choicePanelWidth;
	private int choicePanelHeight;

	private boolean hasAnswered;
	private boolean answer;

	/**
	 * The constructor
	 */
	public PawnChooserPanel(int choicePanelWidth, int choicePanelHeight) {

		this.choicePanelWidth = choicePanelWidth;
		this.choicePanelHeight = choicePanelHeight;

		this.setSize(choicePanelWidth, choicePanelHeight);
		this.setLocation(choicePanelWidth, choicePanelHeight);

		hasAnswered = false;

		listener = new ButtonListener();
		pawn1Button.addActionListener(listener);
		pawn2Button.addActionListener(listener);

		this.setLayout(null);

		pawn1Button.setSize(choicePanelWidth, choicePanelHeight / 2);
		pawn2Button.setSize(choicePanelWidth, choicePanelHeight / 2);
		pawn1Button.setLocation(0, 0);
		pawn2Button.setLocation(0, choicePanelHeight / 2);
		pawn1Button.setOpaque(true);
		pawn2Button.setOpaque(true);
		this.add(pawn1Button);
		this.add(pawn2Button);
		pawn1Button.setVisible(true);
		pawn2Button.setVisible(true);

	}

	public boolean useSecondPlayer(GameMap gameMap) {

		gameMap.add(this);
		this.setVisible(true);

		// the method waits for the user to push a button
		synchronized (this) {
			do {
				try {
					wait();
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			} while (!hasAnswered);
		}

		// removes the panel after the player has choosen the pawn he wants to
		// use
		gameMap.remove(this);
		gameMap.repaint();

		hasAnswered = false;
		return answer;
	}

	/**
	 * This inner class defines a listener that manages the action events
	 * generated by buttons
	 */
	private class ButtonListener implements ActionListener {

		public void actionPerformed(ActionEvent e) {
			JButton pressed = (JButton) e.getSource();

			String selectedOption = pressed.getText();

			if (selectedOption.equals("Use pawn 1")) {
				answer = false;
			} else {
				if (selectedOption.equals("Use pawn 2")) {
					answer = true;
				}
			}

			synchronized (this) {
				hasAnswered = true;
				notify();
			}

		}

	}
}
